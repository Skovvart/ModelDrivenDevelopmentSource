/*
* generated by Xtext
*/
package dk.itu.bddctransform.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import dk.itu.bddctransform.services.LettuceGrammarAccess;

public class LettuceParser extends AbstractContentAssistParser {
	
	@Inject
	private LettuceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected dk.itu.bddctransform.ui.contentassist.antlr.internal.InternalLettuceParser createParser() {
		dk.itu.bddctransform.ui.contentassist.antlr.internal.InternalLettuceParser result = new dk.itu.bddctransform.ui.contentassist.antlr.internal.InternalLettuceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTransformModel_Access().getAlternatives_3(), "rule__TransformModel___Alternatives_3");
					put(grammarAccess.getPatternAccess().getAlternatives(), "rule__Pattern__Alternatives");
					put(grammarAccess.getTransformationAccess().getAlternatives(), "rule__Transformation__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getKeyValueAccess().getAlternatives_3(), "rule__KeyValue__Alternatives_3");
					put(grammarAccess.getTransformModel_Access().getGroup(), "rule__TransformModel___Group__0");
					put(grammarAccess.getBehaviorAccess().getGroup(), "rule__Behavior__Group__0");
					put(grammarAccess.getRuleAccess().getGroup(), "rule__Rule__Group__0");
					put(grammarAccess.getVariableIdAccess().getGroup(), "rule__VariableId__Group__0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getAlternationAccess().getGroup(), "rule__Alternation__Group__0");
					put(grammarAccess.getAlternationAccess().getGroup_4(), "rule__Alternation__Group_4__0");
					put(grammarAccess.getOptionalAccess().getGroup(), "rule__Optional__Group__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getIfDefAccess().getGroup(), "rule__IfDef__Group__0");
					put(grammarAccess.getIfDefAccess().getGroup_3(), "rule__IfDef__Group_3__0");
					put(grammarAccess.getMatchAccess().getGroup(), "rule__Match__Group__0");
					put(grammarAccess.getMatchAccess().getGroup_2(), "rule__Match__Group_2__0");
					put(grammarAccess.getFailAccess().getGroup(), "rule__Fail__Group__0");
					put(grammarAccess.getFailAccess().getGroup_2(), "rule__Fail__Group_2__0");
					put(grammarAccess.getKeyValueAccess().getGroup(), "rule__KeyValue__Group__0");
					put(grammarAccess.getTransformModel_Access().getNameAssignment_2(), "rule__TransformModel___NameAssignment_2");
					put(grammarAccess.getTransformModel_Access().getRulesAssignment_3_0(), "rule__TransformModel___RulesAssignment_3_0");
					put(grammarAccess.getTransformModel_Access().getBehaviorsAssignment_3_1(), "rule__TransformModel___BehaviorsAssignment_3_1");
					put(grammarAccess.getBehaviorAccess().getDescriptionAssignment_1(), "rule__Behavior__DescriptionAssignment_1");
					put(grammarAccess.getBehaviorAccess().getClassAssignment_3(), "rule__Behavior__ClassAssignment_3");
					put(grammarAccess.getBehaviorAccess().getSignatureAssignment_5(), "rule__Behavior__SignatureAssignment_5");
					put(grammarAccess.getRuleAccess().getNameAssignment_1(), "rule__Rule__NameAssignment_1");
					put(grammarAccess.getRuleAccess().getPatternsAssignment_2(), "rule__Rule__PatternsAssignment_2");
					put(grammarAccess.getRuleAccess().getPatternsAssignment_3(), "rule__Rule__PatternsAssignment_3");
					put(grammarAccess.getRuleAccess().getTransformationAssignment_4(), "rule__Rule__TransformationAssignment_4");
					put(grammarAccess.getExactStingAccess().getContentAssignment(), "rule__ExactSting__ContentAssignment");
					put(grammarAccess.getVariableAccess().getNameAssignment_1(), "rule__Variable__NameAssignment_1");
					put(grammarAccess.getAlternationAccess().getChoicesAssignment_1(), "rule__Alternation__ChoicesAssignment_1");
					put(grammarAccess.getAlternationAccess().getChoicesAssignment_3(), "rule__Alternation__ChoicesAssignment_3");
					put(grammarAccess.getAlternationAccess().getChoicesAssignment_4_1(), "rule__Alternation__ChoicesAssignment_4_1");
					put(grammarAccess.getOptionalAccess().getValueAssignment_1(), "rule__Optional__ValueAssignment_1");
					put(grammarAccess.getOptionalAccess().getValueAssignment_2(), "rule__Optional__ValueAssignment_2");
					put(grammarAccess.getExpressionAccess().getValueAssignment_1(), "rule__Expression__ValueAssignment_1");
					put(grammarAccess.getIfDefAccess().getVariablesAssignment_2(), "rule__IfDef__VariablesAssignment_2");
					put(grammarAccess.getIfDefAccess().getVariablesAssignment_3_1(), "rule__IfDef__VariablesAssignment_3_1");
					put(grammarAccess.getIfDefAccess().getTrue_bodyAssignment_5(), "rule__IfDef__True_bodyAssignment_5");
					put(grammarAccess.getIfDefAccess().getFalse_bodyAssignment_7(), "rule__IfDef__False_bodyAssignment_7");
					put(grammarAccess.getMatchAccess().getRuleAssignment_1(), "rule__Match__RuleAssignment_1");
					put(grammarAccess.getMatchAccess().getAssignmentsAssignment_2_0(), "rule__Match__AssignmentsAssignment_2_0");
					put(grammarAccess.getMatchAccess().getAssignmentsAssignment_2_1(), "rule__Match__AssignmentsAssignment_2_1");
					put(grammarAccess.getFailAccess().getMessageAssignment_2_1(), "rule__Fail__MessageAssignment_2_1");
					put(grammarAccess.getKeyValueAccess().getKeyAssignment_1(), "rule__KeyValue__KeyAssignment_1");
					put(grammarAccess.getKeyValueAccess().getValueAssignment_3_0(), "rule__KeyValue__ValueAssignment_3_0");
					put(grammarAccess.getKeyValueAccess().getValueAssignment_3_1(), "rule__KeyValue__ValueAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			dk.itu.bddctransform.ui.contentassist.antlr.internal.InternalLettuceParser typedParser = (dk.itu.bddctransform.ui.contentassist.antlr.internal.InternalLettuceParser) parser;
			typedParser.entryRuleTransformModel_();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public LettuceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(LettuceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
