/*
* generated by Xtext
*/
grammar InternalLettuce;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package dk.itu.bddctransform.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.itu.bddctransform.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import dk.itu.bddctransform.services.LettuceGrammarAccess;

}

@parser::members {
 
 	private LettuceGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(LettuceGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleTransformModel_
entryRuleTransformModel_ 
:
{ before(grammarAccess.getTransformModel_Rule()); }
	 ruleTransformModel_
{ after(grammarAccess.getTransformModel_Rule()); } 
	 EOF 
;

// Rule TransformModel_
ruleTransformModel_
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransformModel_Access().getGroup()); }
(rule__TransformModel___Group__0)
{ after(grammarAccess.getTransformModel_Access().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePattern
entryRulePattern 
:
{ before(grammarAccess.getPatternRule()); }
	 rulePattern
{ after(grammarAccess.getPatternRule()); } 
	 EOF 
;

// Rule Pattern
rulePattern
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPatternAccess().getAlternatives()); }
(rule__Pattern__Alternatives)
{ after(grammarAccess.getPatternAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleTransformation
entryRuleTransformation 
:
{ before(grammarAccess.getTransformationRule()); }
	 ruleTransformation
{ after(grammarAccess.getTransformationRule()); } 
	 EOF 
;

// Rule Transformation
ruleTransformation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTransformationAccess().getAlternatives()); }
(rule__Transformation__Alternatives)
{ after(grammarAccess.getTransformationAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBehavior
entryRuleBehavior 
:
{ before(grammarAccess.getBehaviorRule()); }
	 ruleBehavior
{ after(grammarAccess.getBehaviorRule()); } 
	 EOF 
;

// Rule Behavior
ruleBehavior
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBehaviorAccess().getGroup()); }
(rule__Behavior__Group__0)
{ after(grammarAccess.getBehaviorAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRule
entryRuleRule 
:
{ before(grammarAccess.getRuleRule()); }
	 ruleRule
{ after(grammarAccess.getRuleRule()); } 
	 EOF 
;

// Rule Rule
ruleRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleAccess().getGroup()); }
(rule__Rule__Group__0)
{ after(grammarAccess.getRuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRuleId
entryRuleRuleId 
:
{ before(grammarAccess.getRuleIdRule()); }
	 ruleRuleId
{ after(grammarAccess.getRuleIdRule()); } 
	 EOF 
;

// Rule RuleId
ruleRuleId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRuleIdAccess().getIDTerminalRuleCall()); }
	RULE_ID
{ after(grammarAccess.getRuleIdAccess().getIDTerminalRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariableId
entryRuleVariableId 
:
{ before(grammarAccess.getVariableIdRule()); }
	 ruleVariableId
{ after(grammarAccess.getVariableIdRule()); } 
	 EOF 
;

// Rule VariableId
ruleVariableId
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableIdAccess().getGroup()); }
(rule__VariableId__Group__0)
{ after(grammarAccess.getVariableIdAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExactSting
entryRuleExactSting 
:
{ before(grammarAccess.getExactStingRule()); }
	 ruleExactSting
{ after(grammarAccess.getExactStingRule()); } 
	 EOF 
;

// Rule ExactSting
ruleExactSting
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExactStingAccess().getContentAssignment()); }
(rule__ExactSting__ContentAssignment)
{ after(grammarAccess.getExactStingAccess().getContentAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleVariable
entryRuleVariable 
:
{ before(grammarAccess.getVariableRule()); }
	 ruleVariable
{ after(grammarAccess.getVariableRule()); } 
	 EOF 
;

// Rule Variable
ruleVariable
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariableAccess().getGroup()); }
(rule__Variable__Group__0)
{ after(grammarAccess.getVariableAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAlternation
entryRuleAlternation 
:
{ before(grammarAccess.getAlternationRule()); }
	 ruleAlternation
{ after(grammarAccess.getAlternationRule()); } 
	 EOF 
;

// Rule Alternation
ruleAlternation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAlternationAccess().getGroup()); }
(rule__Alternation__Group__0)
{ after(grammarAccess.getAlternationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOptional
entryRuleOptional 
:
{ before(grammarAccess.getOptionalRule()); }
	 ruleOptional
{ after(grammarAccess.getOptionalRule()); } 
	 EOF 
;

// Rule Optional
ruleOptional
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOptionalAccess().getGroup()); }
(rule__Optional__Group__0)
{ after(grammarAccess.getOptionalAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getGroup()); }
(rule__Expression__Group__0)
{ after(grammarAccess.getExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfDef
entryRuleIfDef 
:
{ before(grammarAccess.getIfDefRule()); }
	 ruleIfDef
{ after(grammarAccess.getIfDefRule()); } 
	 EOF 
;

// Rule IfDef
ruleIfDef
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfDefAccess().getGroup()); }
(rule__IfDef__Group__0)
{ after(grammarAccess.getIfDefAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMatch
entryRuleMatch 
:
{ before(grammarAccess.getMatchRule()); }
	 ruleMatch
{ after(grammarAccess.getMatchRule()); } 
	 EOF 
;

// Rule Match
ruleMatch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMatchAccess().getGroup()); }
(rule__Match__Group__0)
{ after(grammarAccess.getMatchAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFail
entryRuleFail 
:
{ before(grammarAccess.getFailRule()); }
	 ruleFail
{ after(grammarAccess.getFailRule()); } 
	 EOF 
;

// Rule Fail
ruleFail
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFailAccess().getGroup()); }
(rule__Fail__Group__0)
{ after(grammarAccess.getFailAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleKeyValue
entryRuleKeyValue 
:
{ before(grammarAccess.getKeyValueRule()); }
	 ruleKeyValue
{ after(grammarAccess.getKeyValueRule()); } 
	 EOF 
;

// Rule KeyValue
ruleKeyValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getKeyValueAccess().getGroup()); }
(rule__KeyValue__Group__0)
{ after(grammarAccess.getKeyValueAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__TransformModel___Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getRulesAssignment_3_0()); }
(rule__TransformModel___RulesAssignment_3_0)
{ after(grammarAccess.getTransformModel_Access().getRulesAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getTransformModel_Access().getBehaviorsAssignment_3_1()); }
(rule__TransformModel___BehaviorsAssignment_3_1)
{ after(grammarAccess.getTransformModel_Access().getBehaviorsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pattern__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatternAccess().getExactStingParserRuleCall_0()); }
	ruleExactSting
{ after(grammarAccess.getPatternAccess().getExactStingParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPatternAccess().getVariableParserRuleCall_1()); }
	ruleVariable
{ after(grammarAccess.getPatternAccess().getVariableParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getPatternAccess().getAlternationParserRuleCall_2()); }
	ruleAlternation
{ after(grammarAccess.getPatternAccess().getAlternationParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getPatternAccess().getOptionalParserRuleCall_3()); }
	ruleOptional
{ after(grammarAccess.getPatternAccess().getOptionalParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Transformation__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformationAccess().getExpressionParserRuleCall_0()); }
	ruleExpression
{ after(grammarAccess.getTransformationAccess().getExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getTransformationAccess().getIfDefParserRuleCall_1()); }
	ruleIfDef
{ after(grammarAccess.getTransformationAccess().getIfDefParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getTransformationAccess().getMatchParserRuleCall_2()); }
	ruleMatch
{ after(grammarAccess.getTransformationAccess().getMatchParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getTransformationAccess().getFailParserRuleCall_3()); }
	ruleFail
{ after(grammarAccess.getTransformationAccess().getFailParserRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getValueAssignment_3_0()); }
(rule__KeyValue__ValueAssignment_3_0)
{ after(grammarAccess.getKeyValueAccess().getValueAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getKeyValueAccess().getValueAssignment_3_1()); }
(rule__KeyValue__ValueAssignment_3_1)
{ after(grammarAccess.getKeyValueAccess().getValueAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__TransformModel___Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransformModel___Group__0__Impl
	rule__TransformModel___Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformModel___Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getTransformKeyword_0()); }

	'transform' 

{ after(grammarAccess.getTransformModel_Access().getTransformKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransformModel___Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransformModel___Group__1__Impl
	rule__TransformModel___Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformModel___Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getPackageKeyword_1()); }

	'package' 

{ after(grammarAccess.getTransformModel_Access().getPackageKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransformModel___Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransformModel___Group__2__Impl
	rule__TransformModel___Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformModel___Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getNameAssignment_2()); }
(rule__TransformModel___NameAssignment_2)
{ after(grammarAccess.getTransformModel_Access().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TransformModel___Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TransformModel___Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TransformModel___Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getTransformModel_Access().getAlternatives_3()); }
(rule__TransformModel___Alternatives_3)
{ after(grammarAccess.getTransformModel_Access().getAlternatives_3()); }
)
(
{ before(grammarAccess.getTransformModel_Access().getAlternatives_3()); }
(rule__TransformModel___Alternatives_3)*
{ after(grammarAccess.getTransformModel_Access().getAlternatives_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Behavior__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__0__Impl
	rule__Behavior__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getBehaviorKeyword_0()); }

	'behavior' 

{ after(grammarAccess.getBehaviorAccess().getBehaviorKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__1__Impl
	rule__Behavior__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getDescriptionAssignment_1()); }
(rule__Behavior__DescriptionAssignment_1)
{ after(grammarAccess.getBehaviorAccess().getDescriptionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__2__Impl
	rule__Behavior__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getClassKeyword_2()); }

	'class' 

{ after(grammarAccess.getBehaviorAccess().getClassKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__3__Impl
	rule__Behavior__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getClassAssignment_3()); }
(rule__Behavior__ClassAssignment_3)
{ after(grammarAccess.getBehaviorAccess().getClassAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__4__Impl
	rule__Behavior__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getSignatureKeyword_4()); }

	'signature' 

{ after(grammarAccess.getBehaviorAccess().getSignatureKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__5__Impl
	rule__Behavior__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getSignatureAssignment_5()); }
(rule__Behavior__SignatureAssignment_5)
{ after(grammarAccess.getBehaviorAccess().getSignatureAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Behavior__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Behavior__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getEndKeyword_6()); }

	'end' 

{ after(grammarAccess.getBehaviorAccess().getEndKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Rule__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__0__Impl
	rule__Rule__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getRuleKeyword_0()); }

	'rule' 

{ after(grammarAccess.getRuleAccess().getRuleKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__1__Impl
	rule__Rule__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameAssignment_1()); }
(rule__Rule__NameAssignment_1)
{ after(grammarAccess.getRuleAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__2__Impl
	rule__Rule__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getPatternsAssignment_2()); }
(rule__Rule__PatternsAssignment_2)
{ after(grammarAccess.getRuleAccess().getPatternsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__3__Impl
	rule__Rule__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getPatternsAssignment_3()); }
(rule__Rule__PatternsAssignment_3)*
{ after(grammarAccess.getRuleAccess().getPatternsAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__4__Impl
	rule__Rule__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getTransformationAssignment_4()); }
(rule__Rule__TransformationAssignment_4)
{ after(grammarAccess.getRuleAccess().getTransformationAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Rule__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Rule__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getEndKeyword_5()); }

	'end' 

{ after(grammarAccess.getRuleAccess().getEndKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__VariableId__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableId__Group__0__Impl
	rule__VariableId__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIdAccess().getDollarSignKeyword_0()); }

	'$' 

{ after(grammarAccess.getVariableIdAccess().getDollarSignKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__VariableId__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__VariableId__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableId__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableIdAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getVariableIdAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variable__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__0__Impl
	rule__Variable__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getVariableAction_0()); }
(

)
{ after(grammarAccess.getVariableAccess().getVariableAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variable__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variable__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameAssignment_1()); }
(rule__Variable__NameAssignment_1)
{ after(grammarAccess.getVariableAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Alternation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group__0__Impl
	rule__Alternation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getAlternationAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group__1__Impl
	rule__Alternation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getChoicesAssignment_1()); }
(rule__Alternation__ChoicesAssignment_1)
{ after(grammarAccess.getAlternationAccess().getChoicesAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group__2__Impl
	rule__Alternation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getVerticalLineKeyword_2()); }

	'|' 

{ after(grammarAccess.getAlternationAccess().getVerticalLineKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group__3__Impl
	rule__Alternation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getChoicesAssignment_3()); }
(rule__Alternation__ChoicesAssignment_3)
{ after(grammarAccess.getAlternationAccess().getChoicesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group__4__Impl
	rule__Alternation__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getGroup_4()); }
(rule__Alternation__Group_4__0)*
{ after(grammarAccess.getAlternationAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternation__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getAlternationAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Alternation__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group_4__0__Impl
	rule__Alternation__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getVerticalLineKeyword_4_0()); }

	'|' 

{ after(grammarAccess.getAlternationAccess().getVerticalLineKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Alternation__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Alternation__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getChoicesAssignment_4_1()); }
(rule__Alternation__ChoicesAssignment_4_1)
{ after(grammarAccess.getAlternationAccess().getChoicesAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Optional__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__0__Impl
	rule__Optional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getLeftSquareBracketKeyword_0()); }

	'[' 

{ after(grammarAccess.getOptionalAccess().getLeftSquareBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__1__Impl
	rule__Optional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getValueAssignment_1()); }
(rule__Optional__ValueAssignment_1)
{ after(grammarAccess.getOptionalAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__2__Impl
	rule__Optional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getValueAssignment_2()); }
(rule__Optional__ValueAssignment_2)*
{ after(grammarAccess.getOptionalAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Optional__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Optional__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getRightSquareBracketKeyword_3()); }

	']' 

{ after(grammarAccess.getOptionalAccess().getRightSquareBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getExprKeyword_0()); }

	'expr' 

{ after(grammarAccess.getExpressionAccess().getExprKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getValueAssignment_1()); }
(rule__Expression__ValueAssignment_1)
{ after(grammarAccess.getExpressionAccess().getValueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__IfDef__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__0__Impl
	rule__IfDef__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfDefAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__1__Impl
	rule__IfDef__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getDefKeyword_1()); }

	'def?' 

{ after(grammarAccess.getIfDefAccess().getDefKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__2__Impl
	rule__IfDef__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getVariablesAssignment_2()); }
(rule__IfDef__VariablesAssignment_2)
{ after(grammarAccess.getIfDefAccess().getVariablesAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__3__Impl
	rule__IfDef__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getGroup_3()); }
(rule__IfDef__Group_3__0)*
{ after(grammarAccess.getIfDefAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__4__Impl
	rule__IfDef__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getThenKeyword_4()); }

	'then' 

{ after(grammarAccess.getIfDefAccess().getThenKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__5__Impl
	rule__IfDef__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getTrue_bodyAssignment_5()); }
(rule__IfDef__True_bodyAssignment_5)
{ after(grammarAccess.getIfDefAccess().getTrue_bodyAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__6__Impl
	rule__IfDef__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getElseKeyword_6()); }

	'else' 

{ after(grammarAccess.getIfDefAccess().getElseKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__7__Impl
	rule__IfDef__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getFalse_bodyAssignment_7()); }
(rule__IfDef__False_bodyAssignment_7)
{ after(grammarAccess.getIfDefAccess().getFalse_bodyAssignment_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getEndKeyword_8()); }

	'end' 

{ after(grammarAccess.getIfDefAccess().getEndKeyword_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}




















rule__IfDef__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group_3__0__Impl
	rule__IfDef__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getIfDefAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfDef__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfDef__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getVariablesAssignment_3_1()); }
(rule__IfDef__VariablesAssignment_3_1)
{ after(grammarAccess.getIfDefAccess().getVariablesAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Match__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Match__Group__0__Impl
	rule__Match__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getMatchKeyword_0()); }

	'match' 

{ after(grammarAccess.getMatchAccess().getMatchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Match__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Match__Group__1__Impl
	rule__Match__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getRuleAssignment_1()); }
(rule__Match__RuleAssignment_1)
{ after(grammarAccess.getMatchAccess().getRuleAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Match__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Match__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getGroup_2()); }
(rule__Match__Group_2__0)?
{ after(grammarAccess.getMatchAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Match__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Match__Group_2__0__Impl
	rule__Match__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getAssignmentsAssignment_2_0()); }
(rule__Match__AssignmentsAssignment_2_0)
{ after(grammarAccess.getMatchAccess().getAssignmentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Match__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Match__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Match__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getAssignmentsAssignment_2_1()); }
(rule__Match__AssignmentsAssignment_2_1)*
{ after(grammarAccess.getMatchAccess().getAssignmentsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fail__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fail__Group__0__Impl
	rule__Fail__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fail__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFailAccess().getFailAction_0()); }
(

)
{ after(grammarAccess.getFailAccess().getFailAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fail__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fail__Group__1__Impl
	rule__Fail__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fail__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFailAccess().getFailKeyword_1()); }

	'fail' 

{ after(grammarAccess.getFailAccess().getFailKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fail__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fail__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fail__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFailAccess().getGroup_2()); }
(rule__Fail__Group_2__0)?
{ after(grammarAccess.getFailAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Fail__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fail__Group_2__0__Impl
	rule__Fail__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fail__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFailAccess().getMessageKeyword_2_0()); }

	'message' 

{ after(grammarAccess.getFailAccess().getMessageKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fail__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fail__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fail__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFailAccess().getMessageAssignment_2_1()); }
(rule__Fail__MessageAssignment_2_1)
{ after(grammarAccess.getFailAccess().getMessageAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__KeyValue__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__0__Impl
	rule__KeyValue__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getKeyValueAction_0()); }
(

)
{ after(grammarAccess.getKeyValueAccess().getKeyValueAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValue__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__1__Impl
	rule__KeyValue__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getKeyAssignment_1()); }
(rule__KeyValue__KeyAssignment_1)
{ after(grammarAccess.getKeyValueAccess().getKeyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValue__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__2__Impl
	rule__KeyValue__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getEqualsSignKeyword_2()); }

	'=' 

{ after(grammarAccess.getKeyValueAccess().getEqualsSignKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__KeyValue__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__KeyValue__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getAlternatives_3()); }
(rule__KeyValue__Alternatives_3)
{ after(grammarAccess.getKeyValueAccess().getAlternatives_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__TransformModel___NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getNameEStringParserRuleCall_2_0()); }
	ruleEString{ after(grammarAccess.getTransformModel_Access().getNameEStringParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransformModel___RulesAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getRulesRuleParserRuleCall_3_0_0()); }
	ruleRule{ after(grammarAccess.getTransformModel_Access().getRulesRuleParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__TransformModel___BehaviorsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTransformModel_Access().getBehaviorsBehaviorParserRuleCall_3_1_0()); }
	ruleBehavior{ after(grammarAccess.getTransformModel_Access().getBehaviorsBehaviorParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__DescriptionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getDescriptionEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getBehaviorAccess().getDescriptionEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__ClassAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getClassEStringParserRuleCall_3_0()); }
	ruleEString{ after(grammarAccess.getBehaviorAccess().getClassEStringParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Behavior__SignatureAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBehaviorAccess().getSignatureEStringParserRuleCall_5_0()); }
	ruleEString{ after(grammarAccess.getBehaviorAccess().getSignatureEStringParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getNameRuleIdParserRuleCall_1_0()); }
	ruleRuleId{ after(grammarAccess.getRuleAccess().getNameRuleIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__PatternsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getPatternsPatternParserRuleCall_2_0()); }
	rulePattern{ after(grammarAccess.getRuleAccess().getPatternsPatternParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__PatternsAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getPatternsPatternParserRuleCall_3_0()); }
	rulePattern{ after(grammarAccess.getRuleAccess().getPatternsPatternParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Rule__TransformationAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRuleAccess().getTransformationTransformationParserRuleCall_4_0()); }
	ruleTransformation{ after(grammarAccess.getRuleAccess().getTransformationTransformationParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExactSting__ContentAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExactStingAccess().getContentEStringParserRuleCall_0()); }
	ruleEString{ after(grammarAccess.getExactStingAccess().getContentEStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variable__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariableAccess().getNameVariableIdParserRuleCall_1_0()); }
	ruleVariableId{ after(grammarAccess.getVariableAccess().getNameVariableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__ChoicesAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getChoicesPatternParserRuleCall_1_0()); }
	rulePattern{ after(grammarAccess.getAlternationAccess().getChoicesPatternParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__ChoicesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getChoicesPatternParserRuleCall_3_0()); }
	rulePattern{ after(grammarAccess.getAlternationAccess().getChoicesPatternParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Alternation__ChoicesAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAlternationAccess().getChoicesPatternParserRuleCall_4_1_0()); }
	rulePattern{ after(grammarAccess.getAlternationAccess().getChoicesPatternParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getValuePatternParserRuleCall_1_0()); }
	rulePattern{ after(grammarAccess.getOptionalAccess().getValuePatternParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Optional__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOptionalAccess().getValuePatternParserRuleCall_2_0()); }
	rulePattern{ after(grammarAccess.getOptionalAccess().getValuePatternParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getValueEStringParserRuleCall_1_0()); }
	ruleEString{ after(grammarAccess.getExpressionAccess().getValueEStringParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__VariablesAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getVariablesVariableIdParserRuleCall_2_0()); }
	ruleVariableId{ after(grammarAccess.getIfDefAccess().getVariablesVariableIdParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__VariablesAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getVariablesVariableIdParserRuleCall_3_1_0()); }
	ruleVariableId{ after(grammarAccess.getIfDefAccess().getVariablesVariableIdParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__True_bodyAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getTrue_bodyTransformationParserRuleCall_5_0()); }
	ruleTransformation{ after(grammarAccess.getIfDefAccess().getTrue_bodyTransformationParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfDef__False_bodyAssignment_7
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfDefAccess().getFalse_bodyTransformationParserRuleCall_7_0()); }
	ruleTransformation{ after(grammarAccess.getIfDefAccess().getFalse_bodyTransformationParserRuleCall_7_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Match__RuleAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getRuleRuleCrossReference_1_0()); }
(
{ before(grammarAccess.getMatchAccess().getRuleRuleRuleIdParserRuleCall_1_0_1()); }
	ruleRuleId{ after(grammarAccess.getMatchAccess().getRuleRuleRuleIdParserRuleCall_1_0_1()); }
)
{ after(grammarAccess.getMatchAccess().getRuleRuleCrossReference_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Match__AssignmentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getAssignmentsKeyValueParserRuleCall_2_0_0()); }
	ruleKeyValue{ after(grammarAccess.getMatchAccess().getAssignmentsKeyValueParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Match__AssignmentsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMatchAccess().getAssignmentsKeyValueParserRuleCall_2_1_0()); }
	ruleKeyValue{ after(grammarAccess.getMatchAccess().getAssignmentsKeyValueParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fail__MessageAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFailAccess().getMessageEStringParserRuleCall_2_1_0()); }
	ruleEString{ after(grammarAccess.getFailAccess().getMessageEStringParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__KeyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getKeyVariableIdParserRuleCall_1_0()); }
	ruleVariableId{ after(grammarAccess.getKeyValueAccess().getKeyVariableIdParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__ValueAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getValueEStringParserRuleCall_3_0_0()); }
	ruleEString{ after(grammarAccess.getKeyValueAccess().getValueEStringParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__KeyValue__ValueAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getKeyValueAccess().getValueVariableIdParserRuleCall_3_1_0()); }
	ruleVariableId{ after(grammarAccess.getKeyValueAccess().getValueVariableIdParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


