/*
* generated by Xtext
*/
grammar InternalTomato;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package dk.itu.simplifiedjml.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package dk.itu.simplifiedjml.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import dk.itu.simplifiedjml.services.TomatoGrammarAccess;

}

@parser::members {

 	private TomatoGrammarAccess grammarAccess;
 	
    public InternalTomatoParser(TokenStream input, TomatoGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "SimplifiedJMLModel";	
   	}
   	
   	@Override
   	protected TomatoGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleSimplifiedJMLModel
entryRuleSimplifiedJMLModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSimplifiedJMLModelRule()); }
	 iv_ruleSimplifiedJMLModel=ruleSimplifiedJMLModel 
	 { $current=$iv_ruleSimplifiedJMLModel.current; } 
	 EOF 
;

// Rule SimplifiedJMLModel
ruleSimplifiedJMLModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimplifiedJMLModelAccess().getStructuresStructureParserRuleCall_0_0()); 
	    }
		lv_structures_0_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimplifiedJMLModelRule());
	        }
       		add(
       			$current, 
       			"structures",
        		lv_structures_0_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimplifiedJMLModelAccess().getStructuresStructureParserRuleCall_1_0()); 
	    }
		lv_structures_1_0=ruleStructure		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimplifiedJMLModelRule());
	        }
       		add(
       			$current, 
       			"structures",
        		lv_structures_1_0, 
        		"Structure");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleStructure
entryRuleStructure returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStructureRule()); }
	 iv_ruleStructure=ruleStructure 
	 { $current=$iv_ruleStructure.current; } 
	 EOF 
;

// Rule Structure
ruleStructure returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStructureAccess().getStructureAction_0(),
            $current);
    }
)	otherlv_1='class' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStructureAccess().getClassKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getNameEStringParserRuleCall_2_0()); 
	    }
		lv_name_2_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_2_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStructureAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='//@ invariant' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStructureAccess().getInvariantKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getInvariantsAnyOtherParserRuleCall_4_1_0()); 
	    }
		lv_invariants_5_0=ruleAnyOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"invariants",
        		lv_invariants_5_0, 
        		"AnyOther");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6='//@ invariant' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStructureAccess().getInvariantKeyword_4_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getInvariantsAnyOtherParserRuleCall_4_2_1_0()); 
	    }
		lv_invariants_7_0=ruleAnyOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"invariants",
        		lv_invariants_7_0, 
        		"AnyOther");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?((
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getMethodsMethodParserRuleCall_5_0_0()); 
	    }
		lv_methods_8_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_8_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStructureAccess().getMethodsMethodParserRuleCall_5_1_0()); 
	    }
		lv_methods_9_0=ruleMethod		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStructureRule());
	        }
       		add(
       			$current, 
       			"methods",
        		lv_methods_9_0, 
        		"Method");
	        afterParserOrEnumRuleCall();
	    }

)
)*)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getStructureAccess().getRightCurlyBracketKeyword_6());
    }
)
;





// Entry rule entryRuleMethod
entryRuleMethod returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMethodRule()); }
	 iv_ruleMethod=ruleMethod 
	 { $current=$iv_ruleMethod.current; } 
	 EOF 
;

// Rule Method
ruleMethod returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getMethodAccess().getMethodAction_0(),
            $current);
    }
)(	otherlv_1='//@ requires' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMethodAccess().getRequiresKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getRequirementsAnyOtherParserRuleCall_1_1_0()); 
	    }
		lv_requirements_2_0=ruleAnyOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"requirements",
        		lv_requirements_2_0, 
        		"AnyOther");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='\n' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMethodAccess().getLineFeedLfKeyword_1_2());
    }
(	otherlv_4='//@ requires' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMethodAccess().getRequiresKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getRequirementsAnyOtherParserRuleCall_1_3_1_0()); 
	    }
		lv_requirements_5_0=ruleAnyOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"requirements",
        		lv_requirements_5_0, 
        		"AnyOther");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_6='\n' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMethodAccess().getLineFeedLfKeyword_1_3_2());
    }
)*)?(	otherlv_7='//@ ensures' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMethodAccess().getEnsuresKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getEnsuresAnyOtherParserRuleCall_2_1_0()); 
	    }
		lv_ensures_8_0=ruleAnyOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"ensures",
        		lv_ensures_8_0, 
        		"AnyOther");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_9='\n' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMethodAccess().getLineFeedLfKeyword_2_2());
    }
(	otherlv_10='//@ ensures' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getMethodAccess().getEnsuresKeyword_2_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getEnsuresAnyOtherParserRuleCall_2_3_1_0()); 
	    }
		lv_ensures_11_0=ruleAnyOther		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		add(
       			$current, 
       			"ensures",
        		lv_ensures_11_0, 
        		"AnyOther");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_12='\n' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getMethodAccess().getLineFeedLfKeyword_2_3_2());
    }
)*)?	otherlv_13='/*< AUTO GENERATED >*/' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getMethodAccess().getAUTOGENERATEDKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMethodAccess().getSignatureHackySignatureParserRuleCall_4_0()); 
	    }
		lv_signature_14_0=ruleHackySignature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMethodRule());
	        }
       		set(
       			$current, 
       			"signature",
        		lv_signature_14_0, 
        		"HackySignature");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_15='{' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getMethodAccess().getLeftCurlyBracketKeyword_5());
    }
	otherlv_16='/* TODO: Implementation */' 
    {
    	newLeafNode(otherlv_16, grammarAccess.getMethodAccess().getTODOImplementationKeyword_6());
    }
	otherlv_17='throw new UnsupportedOperationException("Not Implemented");' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getMethodAccess().getThrowNewUnsupportedOperationExceptionNotImplementedKeyword_7());
    }
	otherlv_18='}' 
    {
    	newLeafNode(otherlv_18, grammarAccess.getMethodAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleAnyOther
entryRuleAnyOther returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnyOtherRule()); } 
	 iv_ruleAnyOther=ruleAnyOther 
	 { $current=$iv_ruleAnyOther.current.getText(); }  
	 EOF 
;

// Rule AnyOther
ruleAnyOther returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_ANY_OTHER_0=RULE_ANY_OTHER    {
		$current.merge(this_ANY_OTHER_0);
    }

    { 
    newLeafNode(this_ANY_OTHER_0, grammarAccess.getAnyOtherAccess().getANY_OTHERTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getAnyOtherAccess().getIDTerminalRuleCall_1()); 
    }
)*
    ;





// Entry rule entryRuleHackySignature
entryRuleHackySignature returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getHackySignatureRule()); } 
	 iv_ruleHackySignature=ruleHackySignature 
	 { $current=$iv_ruleHackySignature.current.getText(); }  
	 EOF 
;

// Rule HackySignature
ruleHackySignature returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_HACKY_SIGN_0=RULE_HACKY_SIGN    {
		$current.merge(this_HACKY_SIGN_0);
    }

    { 
    newLeafNode(this_HACKY_SIGN_0, grammarAccess.getHackySignatureAccess().getHACKY_SIGNTerminalRuleCall()); 
    }

    ;





RULE_INT : '#@IAMANINT' ('0'..'1')+;

RULE_SL_COMMENT : '##' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_ML_COMMENT : '/#' ( options {greedy=false;} : . )*'#\\';

RULE_HACKY_SIGN : ('public'|'private'|'protected'|'/* default */') ~(')')* ')';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


