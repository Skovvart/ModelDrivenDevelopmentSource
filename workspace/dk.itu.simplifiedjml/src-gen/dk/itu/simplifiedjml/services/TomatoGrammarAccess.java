/*
* generated by Xtext
*/

package dk.itu.simplifiedjml.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TomatoGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class SimplifiedJMLModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimplifiedJMLModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStructuresAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStructuresStructureParserRuleCall_0_0 = (RuleCall)cStructuresAssignment_0.eContents().get(0);
		private final Assignment cStructuresAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStructuresStructureParserRuleCall_1_0 = (RuleCall)cStructuresAssignment_1.eContents().get(0);
		
		//SimplifiedJMLModel:
		//	structures+=Structure structures+=Structure*;
		public ParserRule getRule() { return rule; }

		//structures+=Structure structures+=Structure*
		public Group getGroup() { return cGroup; }

		//structures+=Structure
		public Assignment getStructuresAssignment_0() { return cStructuresAssignment_0; }

		//Structure
		public RuleCall getStructuresStructureParserRuleCall_0_0() { return cStructuresStructureParserRuleCall_0_0; }

		//structures+=Structure*
		public Assignment getStructuresAssignment_1() { return cStructuresAssignment_1; }

		//Structure
		public RuleCall getStructuresStructureParserRuleCall_1_0() { return cStructuresStructureParserRuleCall_1_0; }
	}

	public class StructureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Structure");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStructureAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInvariantKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInvariantsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInvariantsAnyOtherParserRuleCall_4_1_0 = (RuleCall)cInvariantsAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cInvariantKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cInvariantsAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cInvariantsAnyOtherParserRuleCall_4_2_1_0 = (RuleCall)cInvariantsAssignment_4_2_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cMethodsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cMethodsMethodParserRuleCall_5_0_0 = (RuleCall)cMethodsAssignment_5_0.eContents().get(0);
		private final Assignment cMethodsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMethodsMethodParserRuleCall_5_1_0 = (RuleCall)cMethodsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Structure:
		//	{Structure} "class" name=EString "{" ("//@ invariant" invariants+=AnyOther ("//@ invariant" invariants+=AnyOther)*)?
		//	(methods+=Method methods+=Method*)? "}";
		public ParserRule getRule() { return rule; }

		//{Structure} "class" name=EString "{" ("//@ invariant" invariants+=AnyOther ("//@ invariant" invariants+=AnyOther)*)?
		//(methods+=Method methods+=Method*)? "}"
		public Group getGroup() { return cGroup; }

		//{Structure}
		public Action getStructureAction_0() { return cStructureAction_0; }

		//"class"
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }

		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//("//@ invariant" invariants+=AnyOther ("//@ invariant" invariants+=AnyOther)*)?
		public Group getGroup_4() { return cGroup_4; }

		//"//@ invariant"
		public Keyword getInvariantKeyword_4_0() { return cInvariantKeyword_4_0; }

		//invariants+=AnyOther
		public Assignment getInvariantsAssignment_4_1() { return cInvariantsAssignment_4_1; }

		//AnyOther
		public RuleCall getInvariantsAnyOtherParserRuleCall_4_1_0() { return cInvariantsAnyOtherParserRuleCall_4_1_0; }

		//("//@ invariant" invariants+=AnyOther)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"//@ invariant"
		public Keyword getInvariantKeyword_4_2_0() { return cInvariantKeyword_4_2_0; }

		//invariants+=AnyOther
		public Assignment getInvariantsAssignment_4_2_1() { return cInvariantsAssignment_4_2_1; }

		//AnyOther
		public RuleCall getInvariantsAnyOtherParserRuleCall_4_2_1_0() { return cInvariantsAnyOtherParserRuleCall_4_2_1_0; }

		//(methods+=Method methods+=Method*)?
		public Group getGroup_5() { return cGroup_5; }

		//methods+=Method
		public Assignment getMethodsAssignment_5_0() { return cMethodsAssignment_5_0; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_5_0_0() { return cMethodsMethodParserRuleCall_5_0_0; }

		//methods+=Method*
		public Assignment getMethodsAssignment_5_1() { return cMethodsAssignment_5_1; }

		//Method
		public RuleCall getMethodsMethodParserRuleCall_5_1_0() { return cMethodsMethodParserRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class MethodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Method");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMethodAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cRequiresKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRequirementsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRequirementsAnyOtherParserRuleCall_1_1_0 = (RuleCall)cRequirementsAssignment_1_1.eContents().get(0);
		private final Keyword cLineFeedLfKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cRequiresKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cRequirementsAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cRequirementsAnyOtherParserRuleCall_1_3_1_0 = (RuleCall)cRequirementsAssignment_1_3_1.eContents().get(0);
		private final Keyword cLineFeedLfKeyword_1_3_2 = (Keyword)cGroup_1_3.eContents().get(2);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEnsuresKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEnsuresAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEnsuresAnyOtherParserRuleCall_2_1_0 = (RuleCall)cEnsuresAssignment_2_1.eContents().get(0);
		private final Keyword cLineFeedLfKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cEnsuresKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cEnsuresAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cEnsuresAnyOtherParserRuleCall_2_3_1_0 = (RuleCall)cEnsuresAssignment_2_3_1.eContents().get(0);
		private final Keyword cLineFeedLfKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Keyword cAUTOGENERATEDKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSignatureAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSignatureHackySignatureParserRuleCall_4_0 = (RuleCall)cSignatureAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTODOImplementationKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cThrowNewUnsupportedOperationExceptionNotImplementedKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Method:
		//	{Method} ("//@ requires" requirements+=AnyOther "\n" ("//@ requires" requirements+=AnyOther "\n")*)? ("//@ ensures"
		//	ensures+=AnyOther "\n" ("//@ ensures" ensures+=AnyOther "\n")*)? "/ *< AUTO GENERATED >* /" signature=HackySignature "{"
		//	"/ * TODO: Implementation * /" "throw new UnsupportedOperationException(\"Not Implemented\");" "}";
		public ParserRule getRule() { return rule; }

		//{Method} ("//@ requires" requirements+=AnyOther "\n" ("//@ requires" requirements+=AnyOther "\n")*)? ("//@ ensures"
		//ensures+=AnyOther "\n" ("//@ ensures" ensures+=AnyOther "\n")*)? "/ *< AUTO GENERATED >* /" signature=HackySignature "{"
		//"/ * TODO: Implementation * /" "throw new UnsupportedOperationException(\"Not Implemented\");" "}"
		public Group getGroup() { return cGroup; }

		//{Method}
		public Action getMethodAction_0() { return cMethodAction_0; }

		//("//@ requires" requirements+=AnyOther "\n" ("//@ requires" requirements+=AnyOther "\n")*)?
		public Group getGroup_1() { return cGroup_1; }

		//"//@ requires"
		public Keyword getRequiresKeyword_1_0() { return cRequiresKeyword_1_0; }

		//requirements+=AnyOther
		public Assignment getRequirementsAssignment_1_1() { return cRequirementsAssignment_1_1; }

		//AnyOther
		public RuleCall getRequirementsAnyOtherParserRuleCall_1_1_0() { return cRequirementsAnyOtherParserRuleCall_1_1_0; }

		//"\n"
		public Keyword getLineFeedLfKeyword_1_2() { return cLineFeedLfKeyword_1_2; }

		//("//@ requires" requirements+=AnyOther "\n")*
		public Group getGroup_1_3() { return cGroup_1_3; }

		//"//@ requires"
		public Keyword getRequiresKeyword_1_3_0() { return cRequiresKeyword_1_3_0; }

		//requirements+=AnyOther
		public Assignment getRequirementsAssignment_1_3_1() { return cRequirementsAssignment_1_3_1; }

		//AnyOther
		public RuleCall getRequirementsAnyOtherParserRuleCall_1_3_1_0() { return cRequirementsAnyOtherParserRuleCall_1_3_1_0; }

		//"\n"
		public Keyword getLineFeedLfKeyword_1_3_2() { return cLineFeedLfKeyword_1_3_2; }

		//("//@ ensures" ensures+=AnyOther "\n" ("//@ ensures" ensures+=AnyOther "\n")*)?
		public Group getGroup_2() { return cGroup_2; }

		//"//@ ensures"
		public Keyword getEnsuresKeyword_2_0() { return cEnsuresKeyword_2_0; }

		//ensures+=AnyOther
		public Assignment getEnsuresAssignment_2_1() { return cEnsuresAssignment_2_1; }

		//AnyOther
		public RuleCall getEnsuresAnyOtherParserRuleCall_2_1_0() { return cEnsuresAnyOtherParserRuleCall_2_1_0; }

		//"\n"
		public Keyword getLineFeedLfKeyword_2_2() { return cLineFeedLfKeyword_2_2; }

		//("//@ ensures" ensures+=AnyOther "\n")*
		public Group getGroup_2_3() { return cGroup_2_3; }

		//"//@ ensures"
		public Keyword getEnsuresKeyword_2_3_0() { return cEnsuresKeyword_2_3_0; }

		//ensures+=AnyOther
		public Assignment getEnsuresAssignment_2_3_1() { return cEnsuresAssignment_2_3_1; }

		//AnyOther
		public RuleCall getEnsuresAnyOtherParserRuleCall_2_3_1_0() { return cEnsuresAnyOtherParserRuleCall_2_3_1_0; }

		//"\n"
		public Keyword getLineFeedLfKeyword_2_3_2() { return cLineFeedLfKeyword_2_3_2; }

		//"/ *< AUTO GENERATED >* /"
		public Keyword getAUTOGENERATEDKeyword_3() { return cAUTOGENERATEDKeyword_3; }

		//signature=HackySignature
		public Assignment getSignatureAssignment_4() { return cSignatureAssignment_4; }

		//HackySignature
		public RuleCall getSignatureHackySignatureParserRuleCall_4_0() { return cSignatureHackySignatureParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//"/ * TODO: Implementation * /"
		public Keyword getTODOImplementationKeyword_6() { return cTODOImplementationKeyword_6; }

		//"throw new UnsupportedOperationException(\"Not Implemented\");"
		public Keyword getThrowNewUnsupportedOperationExceptionNotImplementedKeyword_7() { return cThrowNewUnsupportedOperationExceptionNotImplementedKeyword_7; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class AnyOtherElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyOther");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cANY_OTHERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AnyOther returns ecore::EString:
		//	(ANY_OTHER | ID)*;
		public ParserRule getRule() { return rule; }

		//(ANY_OTHER | ID)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//ANY_OTHER
		public RuleCall getANY_OTHERTerminalRuleCall_0() { return cANY_OTHERTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class HackySignatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HackySignature");
		private final RuleCall cHACKY_SIGNTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HackySignature returns ecore::EString:
		//	HACKY_SIGN;
		public ParserRule getRule() { return rule; }

		//HACKY_SIGN
		public RuleCall getHACKY_SIGNTerminalRuleCall() { return cHACKY_SIGNTerminalRuleCall; }
	}
	
	
	private SimplifiedJMLModelElements pSimplifiedJMLModel;
	private StructureElements pStructure;
	private MethodElements pMethod;
	private EStringElements pEString;
	private AnyOtherElements pAnyOther;
	private HackySignatureElements pHackySignature;
	private TerminalRule tINT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tHACKY_SIGN;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public TomatoGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.itu.simplifiedjml.Tomato".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SimplifiedJMLModel:
	//	structures+=Structure structures+=Structure*;
	public SimplifiedJMLModelElements getSimplifiedJMLModelAccess() {
		return (pSimplifiedJMLModel != null) ? pSimplifiedJMLModel : (pSimplifiedJMLModel = new SimplifiedJMLModelElements());
	}
	
	public ParserRule getSimplifiedJMLModelRule() {
		return getSimplifiedJMLModelAccess().getRule();
	}

	//Structure:
	//	{Structure} "class" name=EString "{" ("//@ invariant" invariants+=AnyOther ("//@ invariant" invariants+=AnyOther)*)?
	//	(methods+=Method methods+=Method*)? "}";
	public StructureElements getStructureAccess() {
		return (pStructure != null) ? pStructure : (pStructure = new StructureElements());
	}
	
	public ParserRule getStructureRule() {
		return getStructureAccess().getRule();
	}

	//Method:
	//	{Method} ("//@ requires" requirements+=AnyOther "\n" ("//@ requires" requirements+=AnyOther "\n")*)? ("//@ ensures"
	//	ensures+=AnyOther "\n" ("//@ ensures" ensures+=AnyOther "\n")*)? "/ *< AUTO GENERATED >* /" signature=HackySignature "{"
	//	"/ * TODO: Implementation * /" "throw new UnsupportedOperationException(\"Not Implemented\");" "}";
	public MethodElements getMethodAccess() {
		return (pMethod != null) ? pMethod : (pMethod = new MethodElements());
	}
	
	public ParserRule getMethodRule() {
		return getMethodAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return (pEString != null) ? pEString : (pEString = new EStringElements());
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//AnyOther returns ecore::EString:
	//	(ANY_OTHER | ID)*;
	public AnyOtherElements getAnyOtherAccess() {
		return (pAnyOther != null) ? pAnyOther : (pAnyOther = new AnyOtherElements());
	}
	
	public ParserRule getAnyOtherRule() {
		return getAnyOtherAccess().getRule();
	}

	//HackySignature returns ecore::EString:
	//	HACKY_SIGN;
	public HackySignatureElements getHackySignatureAccess() {
		return (pHackySignature != null) ? pHackySignature : (pHackySignature = new HackySignatureElements());
	}
	
	public ParserRule getHackySignatureRule() {
		return getHackySignatureAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"#@IAMANINT" "0".."1"+;
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//terminal SL_COMMENT:
	//	"##" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//	"/#"->"#\\";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal HACKY_SIGN:
	//	("public" | "private" | "protected" | "/ * default * /") !")"* ")";
	public TerminalRule getHACKY_SIGNRule() {
		return (tHACKY_SIGN != null) ? tHACKY_SIGN : (tHACKY_SIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HACKY_SIGN"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
